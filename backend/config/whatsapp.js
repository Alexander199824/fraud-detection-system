const twilio = require('twilio');
const { logger } = require('./database');
require('dotenv').config();

// Configuraci√≥n del cliente de Twilio para WhatsApp
const client = twilio(
  process.env.TWILIO_ACCOUNT_SID,
  process.env.TWILIO_AUTH_TOKEN
);

/**
 * Configuraci√≥n de WhatsApp para notificaciones de fraude
 */
const WhatsAppConfig = {
  // Inicializar configuraci√≥n
  init() {
    if (!process.env.TWILIO_ACCOUNT_SID || !process.env.TWILIO_AUTH_TOKEN) {
      logger.warn('Credenciales de Twilio no configuradas - Notificaciones WhatsApp deshabilitadas');
      return false;
    }
    
    logger.info('Configuraci√≥n de WhatsApp inicializada correctamente');
    return true;
  },

  // Enviar mensaje de alerta de fraude
  async sendFraudAlert(transactionData, fraudScore, analysisDetails) {
    try {
      if (!this.init()) {
        throw new Error('WhatsApp no configurado');
      }

      const message = this.formatFraudMessage(transactionData, fraudScore, analysisDetails);
      
      const result = await client.messages.create({
        from: process.env.TWILIO_WHATSAPP_NUMBER,
        to: process.env.ADMIN_WHATSAPP_NUMBER,
        body: message
      });

      logger.info('Alerta de fraude enviada por WhatsApp', {
        messageSid: result.sid,
        transactionId: transactionData.id,
        fraudScore
      });

      return {
        success: true,
        messageSid: result.sid,
        message: 'Alerta enviada correctamente'
      };

    } catch (error) {
      logger.error('Error al enviar alerta de fraude por WhatsApp:', error);
      return {
        success: false,
        error: error.message
      };
    }
  },

  // Formatear mensaje de alerta
  formatFraudMessage(transaction, fraudScore, analysis) {
    const riskLevel = this.getRiskLevel(fraudScore);
    
    return `üö® *ALERTA DE FRAUDE DETECTADO* üö®

‚ö†Ô∏è *Nivel de Riesgo: ${riskLevel}*
üìä *Puntuaci√≥n: ${(fraudScore * 100).toFixed(1)}%*

üí≥ *Detalles de la Transacci√≥n:*
‚Ä¢ ID: ${transaction.id}
‚Ä¢ Cliente: ${transaction.client_name}
‚Ä¢ Monto: $${transaction.amount}
‚Ä¢ Ubicaci√≥n: ${transaction.location}
‚Ä¢ Fecha: ${new Date(transaction.timestamp).toLocaleString()}
‚Ä¢ Establecimiento: ${transaction.merchant_type}

üß† *An√°lisis de IA:*
‚Ä¢ Capa 1: ${analysis.layer1_results?.anomalies || 'N/A'} anomal√≠as
‚Ä¢ Capa 2: ${analysis.layer2_results?.risk_factors || 'N/A'} factores de riesgo
‚Ä¢ Capa 3: ${analysis.layer3_results?.warnings || 'N/A'} alertas

üéØ *Razones principales:*
${this.formatReasons(analysis.primary_reasons)}

‚è∞ Detectado: ${new Date().toLocaleString()}
ü§ñ Sistema: Red Neuronal Modular v1.0`;
  },

  // Obtener nivel de riesgo basado en puntuaci√≥n
  getRiskLevel(score) {
    if (score >= 0.9) return 'CR√çTICO üî¥';
    if (score >= 0.7) return 'ALTO üü†';
    if (score >= 0.5) return 'MEDIO üü°';
    return 'BAJO üü¢';
  },

  // Formatear razones principales
  formatReasons(reasons) {
    if (!reasons || reasons.length === 0) {
      return '‚Ä¢ Patrones an√≥malos detectados';
    }
    
    return reasons.slice(0, 3).map(reason => `‚Ä¢ ${reason}`).join('\n');
  },

  // Enviar notificaci√≥n de sistema
  async sendSystemNotification(message, priority = 'normal') {
    try {
      if (!this.init()) {
        return { success: false, error: 'WhatsApp no configurado' };
      }

      const formattedMessage = `ü§ñ *Sistema de Detecci√≥n de Fraude*

${priority === 'high' ? '‚ö†Ô∏è PRIORIDAD ALTA ‚ö†Ô∏è' : '‚ÑπÔ∏è Informaci√≥n'}

${message}

‚è∞ ${new Date().toLocaleString()}`;

      const result = await client.messages.create({
        from: process.env.TWILIO_WHATSAPP_NUMBER,
        to: process.env.ADMIN_WHATSAPP_NUMBER,
        body: formattedMessage
      });

      return {
        success: true,
        messageSid: result.sid
      };

    } catch (error) {
      logger.error('Error al enviar notificaci√≥n del sistema:', error);
      return {
        success: false,
        error: error.message
      };
    }
  },

  // Validar configuraci√≥n
  async validateConfig() {
    try {
      if (!process.env.TWILIO_ACCOUNT_SID || !process.env.TWILIO_AUTH_TOKEN) {
        return { valid: false, error: 'Credenciales faltantes' };
      }

      // Verificar que las credenciales sean v√°lidas
      const account = await client.api.accounts(process.env.TWILIO_ACCOUNT_SID).fetch();
      
      return {
        valid: true,
        accountSid: account.sid,
        status: account.status
      };

    } catch (error) {
      return {
        valid: false,
        error: error.message
      };
    }
  }
};

module.exports = WhatsAppConfig;